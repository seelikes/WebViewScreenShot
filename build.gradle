// Top-level build file where you can add configuration options common to all sub-projects/modules.

import groovy.xml.QName

buildscript {
    
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.1'
        

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url 'http://112.74.29.196:34272/repository/maven-public/'
        }
        maven {
            url "https://jitpack.io"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * 将指定的配置信息打包进入pom的dependencies节点
 * scope的取值有
 * compile  --- api
 * provided --- implementation
 * runtime  --- compileOnly
 * test     --- testImplementation androidTestImplementation
 * @param dependencies pom的dependencies节点
 * @param configuration 当前操作的配置信息
 * @param scope 当前的配置预期写入的scope类型。
 * @return void
 */
def wrapIntoDependencies(Node dependencies, Configuration configuration, String scope) {
    if (configuration == null || scope == null || scope.isEmpty()) {
        return
    }
    configuration.allDependencies.each { Dependency dep ->
        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified" || dep.version == "unspecified") {
            return
        }

        for(int i = 0; i < dependencies.children().size(); ++i) {
            Object next = dependencies.children().get(i)
            if (next instanceof Node) {
                Node node = (Node) next
                if (nodeName(node) == "dependency") {
                    if (node.groupId[0].value() == dep.group && node.artifactId[0].value() == dep.name && node.version[0].value() == dep.version) {
                        def scopes = ["compile", "provided", "runtime", "system", "test"]
                        def cur = scopes.indexOf(scope)
                        def attach = scopes.indexOf(node.scope[0].value())
                        if (node.scope[0].value() == null || node.scope[0].value().isEmpty()) {
                            attach = scopes.indexOf("compile")
                        }
                        def winner = cur
                        if (attach < cur) {
                            winner = attach
                        }
                        node.scope[0].value = scopes[winner]
                        return
                    }
                }
            }
        }

        def node = dependencies.appendNode("dependency")
        node.appendNode("groupId", dep.group)
        node.appendNode("artifactId", dep.name)
        node.appendNode("version", dep.version)
        node.appendNode("scope", scope)
    }
}

/**
 * 试图在创建之前检查对应节点是否存在，不存在则创建
 * @param parent 父节点
 * @param name 新建节点名字
 * @return 创建的节点
 */
def createSubNodeIfNotExist(Node parent, String name) {
    if (parent == null || name == null || name.isEmpty()) {
        return null
    }
    for(int i = 0; i < parent.children().size(); ++i) {
        Object next = parent.children().get(i)
        if (next instanceof Node) {
            if (nodeName(next) == name) {
                return next
            }
        }
    }
    return parent.appendNode(name)
}

/**
 * 获取节点的名字
 * @param node 节点
 * @return 节点的名字
 */
def nodeName(Node node) {
    if (node == null) {
        return null
    }
    def name = node.name()
    if (name instanceof String) {
        return name
    }
    else if (name instanceof QName) {
        return name.localPart
    }
    return name
}
